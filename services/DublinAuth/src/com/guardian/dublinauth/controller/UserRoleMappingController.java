/*Copyright (c) 2016-2017 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.guardian.dublinauth.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.guardian.dublinauth.UserRoleMapping;
import com.guardian.dublinauth.service.UserRoleMappingService;


/**
 * Controller object for domain model class UserRoleMapping.
 * @see UserRoleMapping
 */
@RestController("DublinAuth.UserRoleMappingController")
@Api(value = "UserRoleMappingController", description = "Exposes APIs to work with UserRoleMapping resource.")
@RequestMapping("/DublinAuth/UserRoleMapping")
public class UserRoleMappingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserRoleMappingController.class);

    @Autowired
	@Qualifier("DublinAuth.UserRoleMappingService")
	private UserRoleMappingService userRoleMappingService;

	@ApiOperation(value = "Creates a new UserRoleMapping instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UserRoleMapping createUserRoleMapping(@RequestBody UserRoleMapping userRoleMapping) {
		LOGGER.debug("Create UserRoleMapping with information: {}" , userRoleMapping);

		userRoleMapping = userRoleMappingService.create(userRoleMapping);
		LOGGER.debug("Created UserRoleMapping with information: {}" , userRoleMapping);

	    return userRoleMapping;
	}


    @ApiOperation(value = "Returns the UserRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRoleMapping getUserRoleMapping(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting UserRoleMapping with id: {}" , id);

        UserRoleMapping foundUserRoleMapping = userRoleMappingService.getById(id);
        LOGGER.debug("UserRoleMapping details with id: {}" , foundUserRoleMapping);

        return foundUserRoleMapping;
    }

    @ApiOperation(value = "Updates the UserRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRoleMapping editUserRoleMapping(@PathVariable("id") String id, @RequestBody UserRoleMapping userRoleMapping) throws EntityNotFoundException {
        LOGGER.debug("Editing UserRoleMapping with id: {}" , userRoleMapping.getUserRoleMappingId());

        userRoleMapping.setUserRoleMappingId(id);
        userRoleMapping = userRoleMappingService.update(userRoleMapping);
        LOGGER.debug("UserRoleMapping details with id: {}" , userRoleMapping);

        return userRoleMapping;
    }

    @ApiOperation(value = "Deletes the UserRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserRoleMapping(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserRoleMapping with id: {}" , id);

        UserRoleMapping deletedUserRoleMapping = userRoleMappingService.delete(id);

        return deletedUserRoleMapping != null;
    }

    /**
     * @deprecated Use {@link #findUserRoleMappings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserRoleMapping instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserRoleMapping> searchUserRoleMappingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserRoleMappings list");
        return userRoleMappingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserRoleMapping instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserRoleMapping> findUserRoleMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserRoleMappings list");
        return userRoleMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserRoleMapping instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserRoleMapping> filterUserRoleMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserRoleMappings list");
        return userRoleMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserRoleMappings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userRoleMappingService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UserRoleMapping instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserRoleMappings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserRoleMappings");
		return userRoleMappingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserRoleMappingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userRoleMappingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserRoleMappingService instance
	 */
	protected void setUserRoleMappingService(UserRoleMappingService service) {
		this.userRoleMappingService = service;
	}

}

