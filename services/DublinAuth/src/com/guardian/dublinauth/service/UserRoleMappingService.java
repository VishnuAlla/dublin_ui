/*Copyright (c) 2016-2017 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.guardian.dublinauth.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.guardian.dublinauth.UserRoleMapping;

/**
 * Service object for domain model class {@link UserRoleMapping}.
 */
public interface UserRoleMappingService {

    /**
     * Creates a new UserRoleMapping. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserRoleMapping if any.
     *
     * @param userRoleMapping Details of the UserRoleMapping to be created; value cannot be null.
     * @return The newly created UserRoleMapping.
     */
	UserRoleMapping create(UserRoleMapping userRoleMapping);


	/**
	 * Returns UserRoleMapping by given id if exists.
	 *
	 * @param userrolemappingId The id of the UserRoleMapping to get; value cannot be null.
	 * @return UserRoleMapping associated with the given userrolemappingId.
     * @throws EntityNotFoundException If no UserRoleMapping is found.
	 */
	UserRoleMapping getById(String userrolemappingId) throws EntityNotFoundException;

    /**
	 * Find and return the UserRoleMapping by given id if exists, returns null otherwise.
	 *
	 * @param userrolemappingId The id of the UserRoleMapping to get; value cannot be null.
	 * @return UserRoleMapping associated with the given userrolemappingId.
	 */
	UserRoleMapping findById(String userrolemappingId);


	/**
	 * Updates the details of an existing UserRoleMapping. It replaces all fields of the existing UserRoleMapping with the given userRoleMapping.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on UserRoleMapping if any.
     *
	 * @param userRoleMapping The details of the UserRoleMapping to be updated; value cannot be null.
	 * @return The updated UserRoleMapping.
	 * @throws EntityNotFoundException if no UserRoleMapping is found with given input.
	 */
	UserRoleMapping update(UserRoleMapping userRoleMapping) throws EntityNotFoundException;

    /**
	 * Deletes an existing UserRoleMapping with the given id.
	 *
	 * @param userrolemappingId The id of the UserRoleMapping to be deleted; value cannot be null.
	 * @return The deleted UserRoleMapping.
	 * @throws EntityNotFoundException if no UserRoleMapping found with the given id.
	 */
	UserRoleMapping delete(String userrolemappingId) throws EntityNotFoundException;

	/**
	 * Find all UserRoleMappings matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserRoleMappings.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<UserRoleMapping> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all UserRoleMappings matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserRoleMappings.
     *
     * @see Pageable
     * @see Page
	 */
    Page<UserRoleMapping> findAll(String query, Pageable pageable);

    /**
	 * Exports all UserRoleMappings matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the UserRoleMappings in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the UserRoleMapping.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

