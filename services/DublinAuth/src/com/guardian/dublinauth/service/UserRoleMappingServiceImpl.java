/*Copyright (c) 2016-2017 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.guardian.dublinauth.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.guardian.dublinauth.UserRoleMapping;


/**
 * ServiceImpl object for domain model class UserRoleMapping.
 *
 * @see UserRoleMapping
 */
@Service("DublinAuth.UserRoleMappingService")
public class UserRoleMappingServiceImpl implements UserRoleMappingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserRoleMappingServiceImpl.class);


    @Autowired
    @Qualifier("DublinAuth.UserRoleMappingDao")
    private WMGenericDao<UserRoleMapping, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserRoleMapping, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DublinAuthTransactionManager")
    @Override
	public UserRoleMapping create(UserRoleMapping userRoleMapping) {
        LOGGER.debug("Creating a new UserRoleMapping with information: {}", userRoleMapping);
        UserRoleMapping userRoleMappingCreated = this.wmGenericDao.create(userRoleMapping);
        return userRoleMappingCreated;
    }

	@Transactional(readOnly = true, value = "DublinAuthTransactionManager")
	@Override
	public UserRoleMapping getById(String userrolemappingId) throws EntityNotFoundException {
        LOGGER.debug("Finding UserRoleMapping by id: {}", userrolemappingId);
        UserRoleMapping userRoleMapping = this.wmGenericDao.findById(userrolemappingId);
        if (userRoleMapping == null){
            LOGGER.debug("No UserRoleMapping found with id: {}", userrolemappingId);
            throw new EntityNotFoundException(String.valueOf(userrolemappingId));
        }
        return userRoleMapping;
    }

    @Transactional(readOnly = true, value = "DublinAuthTransactionManager")
	@Override
	public UserRoleMapping findById(String userrolemappingId) {
        LOGGER.debug("Finding UserRoleMapping by id: {}", userrolemappingId);
        return this.wmGenericDao.findById(userrolemappingId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "DublinAuthTransactionManager")
	@Override
	public UserRoleMapping update(UserRoleMapping userRoleMapping) throws EntityNotFoundException {
        LOGGER.debug("Updating UserRoleMapping with information: {}", userRoleMapping);
        this.wmGenericDao.update(userRoleMapping);

        String userrolemappingId = userRoleMapping.getUserRoleMappingId();

        return this.wmGenericDao.findById(userrolemappingId);
    }

    @Transactional(value = "DublinAuthTransactionManager")
	@Override
	public UserRoleMapping delete(String userrolemappingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserRoleMapping with id: {}", userrolemappingId);
        UserRoleMapping deleted = this.wmGenericDao.findById(userrolemappingId);
        if (deleted == null) {
            LOGGER.debug("No UserRoleMapping found with id: {}", userrolemappingId);
            throw new EntityNotFoundException(String.valueOf(userrolemappingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "DublinAuthTransactionManager")
	@Override
	public Page<UserRoleMapping> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserRoleMappings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DublinAuthTransactionManager")
    @Override
    public Page<UserRoleMapping> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserRoleMappings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DublinAuthTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DublinAuth for table UserRoleMapping to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "DublinAuthTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DublinAuthTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

